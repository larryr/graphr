use std::str::FromStr;

grammar;


// add any necessary imports here
extern {

}

//
// Lexer rules
//
//GRAPH_EOF_TOKEN: char = r'\u{0000}'; // EOF represented as null character
//LETTER: () = r"[A-Za-z_]|[\u0080-\u00FF]";
//DIGIT: () = r"[0-9]";
//NAME: () = <LETTER>(<LETTER> | <DIGIT>)*;


NODE: () = "node";
EDGE: () = "edge";
GRAPH: () = "graph";
DIGRAPH: () = "digraph";
SUBGRAPH: () = "subgraph";
STRICT: () = "strict";

//
// Parser rules
//


pub Term: i32 = {
    <n:Num> => n,
    "(" <t:Term> ")" => t,
};

Num: i32 =
    <s:r"[-]*[0-9]+"> => i32::from_str(s).unwrap();


pub T_node: () = NODE;
pub T_edge: () = EDGE;
pub T_graph: () = GRAPH;
pub T_digraph: () = DIGRAPH;
pub T_subgraph: () = SUBGRAPH;
pub T_strict: () = STRICT;


